<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微信小程序聊天系统]]></title>
    <url>%2F2018%2F06%2F27%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[摘要：这是一篇关于小程序聊天系统的制作 聊天界面如何布局 聊天界面如何跑通逻辑 小程序聊天系统的制作：先上效果图 编辑之后的效果 好的，开始上代码首先呢进行页面布局，这是部分聊天框的代码，这部分我放在了标签里面，让它可进行滚动（这里有两个坑，下边会说到） 1234567891011121314151617&lt;view class=&quot;time&quot;&gt;2018-02-16 13:08&lt;/view&gt;&lt;!-- 加了chat_reverse和reverse是对方发给我的信息 --&gt;&lt;view class=&quot;chat chat_reverse&quot;&gt; &lt;view class=&quot;head&quot;&gt;&lt;/view&gt; &lt;view class=&quot;send reverse&quot;&gt; &lt;text&gt;周末有空吗&lt;/text&gt; &lt;view class=&quot;arrow&quot;&gt;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt;&lt;!-- 没有chat_reverse和reverse是我发给对方信息 --&gt;&lt;view class=&quot;chat&quot;&gt; &lt;view class=&quot;send&quot;&gt; &lt;text&gt;有的，周末你想去哪儿吗有的，周末你想去哪儿吗&lt;/text&gt; &lt;view class=&quot;arrow&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;view class=&quot;head&quot;&gt;&lt;/view&gt;&lt;/view&gt; 这里有一个要注意的地方和一个难点： 聊天框得自适应对不对，不能给他固定一个width，因此呢我给了他一个最大宽度 max-width，那么他在超过最大宽度时候就可以换行。 难点呢在于聊天框的箭头指向，就这个小小的三角形。我绞尽脑汁啊想到了一个办法。我发现如果不给div设置宽度和高度，只给他设置边框的话，那么这个边框就由四个小三角形组成。于是就有了下边的代码 123456789101112131415161718192021222324252627.send &#123; position: relative; top: 2rpx; width: auto; height: auto; max-width: 500rpx; background: #3c98e7; border-radius: 16px; /* 圆角 */ white-space: pre-wrap; display: inline-block;&#125;.send .arrow &#123; position: absolute; top: 4px; right: -24rpx; width: 0; height: 0; font-size: 0; border-top: 8rpx solid; border-left: 16rpx solid; border-bottom: 6rpx solid; border-right: 16rpx solid; border-color: transparent transparent transparent #3c98e7; transform: rotate(-28deg);&#125; 这里呢，父元素就是聊天框，子元素就是指向的箭头，聊天框相对定位，箭头绝对定位，将他的位置固定再聊天框边边那块地方。然后箭头的大小啊，位置啊，通过top、border-top等这几个元素慢慢调吧。这里我还给他设置了一个角度transform: rotate(-28deg); 那么到这里，界面构建的应该都没太大问题了吧？然后开始写一写逻辑部分。首先呢既然是聊天系统，你发送的话信息得出去吧。那么这里的逻辑是这样的： HTML部分1234567891011121314151617181920212223&lt;scroll-view scroll-y=&apos;true&apos; scroll-top=&quot;&#123;&#123;scrollTop&#125;&#125;&quot; class=&quot;content&quot;&gt; &lt;view class=&quot;time&quot;&gt;2018-02-16 13:08&lt;/view&gt; &lt;!-- 这里模拟聊天数据 --&gt; &lt;view class=&quot;chat &#123;&#123;item.receive?&apos;&apos;:&apos;chat_reverse&apos;&#125;&#125;&quot; wx:for=&quot;&#123;&#123;chatData&#125;&#125;&quot; wx:key=&quot;index&quot;&gt; &lt;!-- 如果对方发送消息，头像在左边 --&gt; &lt;view class=&quot;head&quot; wx:if=&quot;&#123;&#123;!item.receive&#125;&#125;&quot;&gt;&lt;/view&gt; &lt;view class=&quot;send &#123;&#123;item.receive?&apos;&apos;:&apos;reverse&apos;&#125;&#125;&quot;&gt; &lt;text&gt;&#123;&#123;item.content&#125;&#125;&lt;/text&gt; &lt;view class=&quot;arrow&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;!-- 如果我发送消息，头像在右边 --&gt; &lt;view class=&quot;head&quot; wx:if=&quot;&#123;&#123;item.receive&#125;&#125;&quot;&gt;&lt;/view&gt; &lt;/view&gt; &lt;!-- 底部的距离 --&gt; &lt;!-- &lt;view style=&quot;width: 100%;height: 120rpx;float:left;&quot;&gt;&lt;/view&gt; --&gt;&lt;/scroll-view&gt;&lt;!-- 信息发送框 --&gt;&lt;view class=&quot;message&quot;&gt; &lt;input value=&quot;&#123;&#123;mySend&#125;&#125;&quot; placeholder=&quot;想说点什么...&quot; placeholder-class=&quot;placeholder&quot; confirm-type=&quot;send&quot; bindconfirm=&quot;bindSend&quot; maxlength=&quot;-1&quot; /&gt;&lt;/view&gt; CSS部分12345678910111213bindSend: function(e) &#123; var that = this; var obj = &#123;&#125;; // 给他一个对象，存放将要发送的消息 console.log(e.detail.value); obj.content = e.detail.value; obj.receive = true; that.data.chatData.push(obj) that.setData(&#123; chatData: that.data.chatData, mySend: &apos;&apos; // 发送之后，这里将聊天框清空 &#125;) that.sendMessage(); &#125; 我用了 bindconfirm=”bindSend” 绑定键盘的完成按钮，当你放松时执行 bindSend，bindSend 的作用很简单，就是储存这一次的消息，并且 添加到消息的这个数组中的最后一位（这里还加了一个参数 receive，为了判断是我发送的还是我接收的）。 这里还有个稍难点就是每次发送完毕之后，页面应该是要滚动到最底部，才能看到最新的消息对不对，不然不符合用户体验。于是乎我用了这个方法： 123456sendMessage: function () &#123; var len = this.data.chatData.length //遍历的数组的长度 this.setData(&#123; scrollTop: 1000 * len // 这里我们的单对话区域最高1000，取了最大值，应该有方法取到精确的 &#125;); &#125; 代码很简单，我定义了一个值scrollTop，就是设置设置竖向滚动条位置，参考文档在这里，然后在scroll-view这个组建上的scroll-top属性绑定这个值就好了。 由于目前还没有对接后台，所以微信小程序聊天系统的讲解就先到这里了，对接后小程序的WebSocket方法我估计也会写一篇文章，在此多谢大家的观看了]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建Hexo博客初体验]]></title>
    <url>%2F2018%2F06%2F02%2F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2%E5%88%9D%E4%BD%93%E9%AA%8C%2F</url>
    <content type="text"><![CDATA[摘要：这是一篇关于小白如何使用Github Pages和Hexo搭建属于自己的博客： 如何使用和配置Hexo框架 如何将Hexo部署到自己的github项目中 前言：大学刚毕业，正式步入职业生涯了，碰巧回去授位的时候一位师弟告诉我说他创建了自己的博客，问我要不要也弄一个。好的，在他的帮助下完成了属于自己的博客。这职业生涯的第一篇博客，就写写如何搭建Hexo博客吧 一、环境配置安装node.js 下载node.js选择自己电脑版本的 安装git 下载git同样是根据电脑版本下载 下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。 鼠标邮件菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。 二、Hexo安装①桌面鼠标右键，选择Git Bash Here，输入下面命令： npm install -g hexo-cli 如果出现说明hexo已经安装成功（针对windows） ②然后需要创建一个文件夹来存放hexo文件（相当于你的博客文件夹）例如：我在电脑上手动创建了一个名叫blog的文件夹，然后需要执行以下命令初始化： hexo init e:\blog 进入该目录： cd e:\blog 执行以下命令，系统会可以根据package.json文件中dependencies的配置安装所有依赖包： npm install 然后生成部署文件，启动本地服务 1.hexo g # hexo generate, 生成静态文件 2.hexo s # hexo server，可以在http://localhost:4000/ 查看 其他hexo命令用法可参考 Hexo官网 接下来我们可以在本地预览自己的博客了，打开http://localhost:4000/ 三、Github Pages配置顾名思义需要一个Github账号，然后创建一个仓库： 注意：仓库的名字必须是username/username.github.io注意：仓库的名字必须是username/username.github.io注意：仓库的名字必须是username/username.github.io例如：我的用户名为583175694,那么Repository name必须命名为：583175694.github.io重要的事情说三遍！！！（当初踩过的坑…）配置SSH密钥上传文件需要配置ssh key，所以首先需要检查本机电脑是否已经存在SSH keys，如果存在删除 .ssh文件夹里面的所有文件（如果不存在的忽略这条）然后设置下name和email git config --global user.name &quot;&lt;your name&gt;&quot; git config --global user.email &quot;&lt;your email&gt;&quot;name的名字随便起，email我建议填github同一个邮箱生成SSH密钥输入以下命令生成，邮箱是github里面注册的邮箱，ok回车： ssh-keygen -t rsa -C &quot;XXXXX@qq.com&quot;一路按回车键即可，如果设置了密码请记住。这一步在~/.ssh/下生成了两个文件id_rsa 和 id_rsa.pub获取SSH密钥 $ cat ~/.ssh/id_rsa.pub新建一个key，然后拷贝下生成的keykey粘贴刚刚生成的密钥，title随便起注意：重点圈起来，key下面的√记得一定要打哦！不然后面会报错，又是踩过的坑说多都是泪… 提交后，输入一下命令： ssh git@github.com 如果出现这样的内容： The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &apos;github.com,192.30.252.128&apos; (RSA) to the list of known hosts. Hi git-xuhao! You&apos;ve successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed. 大致恭喜你配置成功！！这时钥匙也变绿啦 四、部署到Github配置_config.yml 编辑刚刚新建的文件夹（e:/blog）根目录内,找到该文件，找到并修改Deployment部分（一般在最后） 注意：在每个填入前加个空格(否则会有错误)，其中repository填的是刚刚github新建仓库的SSH地址。 安装Git包，执行以下命令： npm install hexo-deployer-git --save cd到根目录，执行以下命令即可： hexo g hexo d now，你可以输入https://username.github.io来访问自己的博客啦（开森）！！！ 五、关于Hexo使用①更换主题 可以进入Hexo官网主题专栏找到自己想要的主题（个人强推：next） 找到想要的然后到克隆主题啦，十分简单，复制github地址输入一下命令： git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 成功后，你会发现themes文件夹里面多了一个注意文件夹 然后修改下根目录配置文件_config.yml里面的theme：主题名字（主题文件夹名字相同） 重新部署主题，Git Bash cd到根目录，输入一下命令： hexo g hexo s #本地预览 如果满意，就可以输入一下命令上传： hexo d ②新建博客文章 新建一篇文章(md文件)输入以下命令： hexo n &quot;文章标题&quot; 然后会在根目录/source/_posts 下生成你的文章文件，打开编辑器编辑就好（本人使用：MarkdownPad 2） 编写好后只要执行： hexo d -g 就会更新我们的Github库。 有关更多配置使用问题，可以参考Hexo官网文档 ~ 此文为转载，出处：https://583175694.github.io/]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
